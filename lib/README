---------------------------------------------------------------
ZRT - ZeroVM runtime library
---------------------------------------------------------------
{DOCPATH}

1. ZRT it is an environment for user application, simple POSIX
Operating System that itself implements system calls handlers. ZRT is a
part of GNU libc that using plaggable interface to access syscall
handlers implemented on side of ZRT environment. Direct syscalls from
user code to host system are not allowed, untrusted code at all should
be prevalidated by ZeroVM before execution, see ZeroVM docs.
Untrusted code - it's an any code running under ZeroVM. Both zerovm
environment and user code running in the same address space.
2. ZRT API now includes a one function zfork(), which actually an
extension for ZVM API. It's calling zvm_fork() and in that moment then
it returns execution context into a forked session, it will re-read
nvram config and will handle sections :
2.1. [fstab] it performs mount of new records and remount of
existing. The channels wanted to be remount must have a seekable
type=1 or type=3 to be able to read a channel again from beginning.
2.2. [env] add new environment variables and rewrite existing;
2.3. [mapping] updates channels mappings.
2.4. [debug], [time] sections also will be handled;
3. Implemented 2 own filesystems that also accessible via plaggable
interface: RW FS hosted in memory and FS with an unmutable structure
on top of channels; All FSs accessible via single object - main
filesystem that combines implemented FSs and translates requests to
real FS implementations depending on file path.
3.1 Rewritable filesystem, available in user space as mounted on "/"
root. ZRT creates it at runtime in memory, and injects it by real
directories/files if nvram feature used during startup before main()
entry point.  All changes made in this filesystem will lost at nexe
exit.
3.2 Channels mount filesystem - it is wrapper around zerovm channels,
and mounted into "/dev" folder. It has static structure based on
channels aliases list, and interpret channels as devices. All channels
aliases listed in zerovm manifest file should be started with /dev/
alias, that represents their belonging to /dev/ mount. Channels whose
aliases not started with /dev/ will not be accessible by channels
filesystem. Functions like stat, readdir are supported also;
3.2.1 Channels representation by stat function. Sequential access
channels are represented as character devices; Random access channels
are represented as block devices;
3.2.2 Channels I/O. For channels described in manifest - input/output
operations are available, and folowing allowed :
Channel type SGetSPut=0, sequential  get / sequential_put
RDONLY     Seek pos —     get
WRONLY     Seek pos —     get
RDWR       Seek pos —     get
Channel type RGetSPut=1, Random get / sequential put
RDONLY     Seek pos — set get 
WRONLY     Seek pos —     get
RDWR       Write pos unavailable; Read Seek pos - set get;
Channel type SGetRPut=2, Sequential get / Random put
RDONLY     Seek pos —     get
WRONLY     Seek pos — set get
RDWR       Read pos unavailable; Write Seek pos - set get;
Channel type RGetRPut=3, Random get / Random put
RDONLY     Seek pos — set get
WRONLY     Seek pos —     get
RDWR       Seek pos — set get
3.2.3 Debugging channel. ZRT has its own debugging channel associated
with alias name "/dev/debug". If this channel is defined then all
debugging ZRT information will go into the debug channel If debug
channel is not defined no debug info will available (apart from system
logs). Debugging level are regulated by VERBOSITY environment
variables and supports 1,2,3 values.
3.2.4 Nvram channel, it's a config file for tuning zvm session, has
alias "/dev/nvram". Config syntax is allowing comments starting with
"#", and sections names that are expected in square brackets. Single
pair of key and value must be on single line and it's value should not
contain carriage return. Escaping rules available if need to provide
unsupported chars as value.
List of supported nvram sections:
3.2.4.1. Section [fstab]: provides ability to read/write TAR images
into/from filesystem. The read from TAR image occurs silently and
injects image contents into filesystem then accessing a file at
specified mountpoint. The write into TAR image from filesystem doing
at the end of session in the 'exit' syscall handler.
Keywords are valid for fstab:
- channel : zerovm channel alias, provided in manifest file
- mountpoint : path in zrt filesystem, any directory path except '/dev/' 
- access : ro / wo. 
  'ro' specify it if you need to inject files into filesystem;
  'wo' is for saving contents of filesystem into tar archive, but
  don't specify mountpoint=/, because the saving into TAR image of
  entire filesystem is not supported;
- removable : yes / no; 
  This option is deprecated, since updated nvram config is used at
  fork. Set any option value;
3.2.4.2. Section [env]: Add environment vars into main(), or just
update enviroments at fork; keywords are:
- name : variable name
- value : variable value
Escaping of value are supported, rules the same as for args section.
3.2.4.3. Section [args]: Setup command line arguments - 1st argument
is application name famous as argv0, the rest of contents is
arguments. argument has several words but inside of double quotes
interpreting as single argument. It's necessary to escape chars: ','
'\n' '"' '\' it must be escaped. instead of char just insert \x and
appropriate hex value. But any another char can be escaped, using same
rule.
- args : command line, specifying also program name as first arg.
3.2.4.4. Section [mapping] : Can be used to set zerovm channels mode,
if need to override default values: for sequential channels default
mode is 'pipe', for devices with random access mode is block device.
args are:
- channel : zerovm channel whose mode need to be overrided
- mode : pipe / char /file ;
3.2.4.5. Section [time] : Use to set time, arg:
- seconds : Amount of seconds since 1970, to get value in linux
  terminal use command: date +"%s"
3.2.4.6. Section [debug] : Use to set verbosity level, for log file
/dev/debug. To enable logging this channel must exist in zerovm
manifest file. Arg is:
- verbosity : decimal value 0,1,2,3 or 4 for maximum logging level.
3.2.4.7. Section [precache] : Doing call of zfork() before main()
function, somewhere internally but after [fstab] section handling; No
need to specify [args], [env] and [precache] in the same nvram config,
because args, env will be handled after zfork() using updated nvram
config. See zfork() for full list of sections which must be handled.
- precache : yes / no ; 
  'yes'- call zfork; 
  'no' - then nothing happens;
3.2.4.8. Example:
[fstab] 
#inject archive contents into zrt fs
channel=/dev/mount/import.tar, mountpoint=/, access=ro, removable=no
channel=/dev/mount/scripts.tar, mountpoint=/, access=ro, removable=yes
#save /singles folder contents into archive
channel=/dev/mount/export.tar,  mountpoint=/singles, access=wo, removable=no
[env]
name=SOMEENV, value=some value
[args]
args=tarimage.nexe -arg1 \x2C\x2C\x2C ::: \x22\x22\x22 "short text"
\x22short text\x22 c:\x5Cwin\x5Cpath\x5Cfile.txt "big text with
carriage \x0A return"
[mapping]
channel=/dev/stdin,  mode=pipe #FIFO DEV
channel=/dev/stdout, mode=char  #CHAR DEV
channel=/dev/stderr, mode=file #REGULAR FILE
[time]
seconds=1370454582 #since 1970
[debug]
verbosity=4
[precache]
precache=yes
